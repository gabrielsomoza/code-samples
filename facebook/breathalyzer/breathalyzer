#!/usr/bin/ruby
#DICTIONARY_FILE = '/var/tmp/twl06.txt'
DICTIONARY_FILE = 'twl06.txt'

class String
  def diff(word)
    c = 0
    for i in 0...[self.length,word.length].min
      c += 1 if self[i] == word[i]
    end
    c + (self.length - word.length).abs
  end
end

class Breathalyzer

  attr_accessor :dictionary, :cache, :lengths

  def initialize
    @dictionary = Array.new
    @cache = Hash.new
    @lengths = Hash.new
    dictf = File.open(DICTIONARY_FILE)
    dictf.each_line do |word|
      @dictionary << word if word.chomp!
    end
    dictf.close
    @dictionary = @dictionary.sort!{|a,b| a.length <=> b.length}
    i = 0
    length = 2
    @dictionary.each do |w|
      if w.length == length && !@lengths[length]
        @lengths[length] = i
        length += 1
      end
      i += 1
    end
  end
  
  def analyze(sentence)
    distance = 0
    sentence.upcase!.split(' ').each do |word|
      if @cache[word]
        distance += @cache[word]
      else
        distance += changes(word)
      end
    end
    distance
  end

  
  def changes(word)
    #if the word exists then there's no changes
    return 0 if @dictionary.include? word
    #find the difference to the closest word
    shortest = -1
    closest = nil
    high = low = word.length
    while true
      break if shortest > 0 && (shortest <= word.length - low || shortest <= (word.length-high).abs) 
      if low >= @lengths.keys.first
        low_a = @dictionary[@lengths[low]...(@lengths[low+1]-1)]
      else
        low_a = Array.new        
      end
      if high == low || high > @lengths.keys.last
        high_a = Array.new
      else
        last = @lengths[high+1]
        high_a = @dictionary[@lengths[high]...(last ? last - 1 : @dictionary.size - 1)]
      end
      high_a = (low_a + high_a).sort{|a,b| word.diff(b) <=> word.diff(a)}
      high_a.each do |w|
        lev = levenshtein(word, w)
        if lev == 0
          shortest = 0
          closest = w
          break
        end
        if lev <= shortest || shortest < 0
          shortest = lev
          closest = w
        end
      end
      break if shortest == 0
      low -= 1
      high += 1
    end
    @cache[word] = shortest
    return shortest
  end

  def levenshtein(s, t)
    n = s.length
    m = t.length
    return m if (0 == n)
    return n if (0 == m)
  
    d = (0..m).to_a
    x = nil

    for i in 0...n
      e = i+1
      for j in 0...m
        cost = (s[i] == t[j]) ? 0 : 1
        x = [
          d[j+1] + 1, # insertion
          e + 1,      # deletion
          d[j] + cost # substitution
        ].min
        d[j] = e
        e = x
      end
      d[m] = x
    end

    return x
  end
end #Breathalyzer

post = File.open(ARGV.first, 'rb'){|f| f.read}
b = Breathalyzer.new
puts b.analyze(post)